package com.aci;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;

/*
Use AOP to implement the following
1) Minimum withdraw amount should be $500.
2) Disallow withdraw if the amount is greater than the balance
3) The minimum balance of the Account should always be maintained at $1000.
4) Print the new balance after every deposit and withdraw operation

Whenever withdraw method is denied append a message to a log file "accounts.log" specifying the accountNumber and a message like this.
*******************************
AccountNumber: 1000
Message: Withdraw denied for $500 at <date and time>
*******************************
 */

@Aspect
@Component
public class AccountAspect {
	private static final int minimumWithdrawal = 500;
	private static final int minimumBalance = 1000;
	private static final String logTemplate = "*******************************\nAccountNumber: %1$s\nMessage: %2$s denied for $%3$s at %4$s\n\n";
	
	@Around("execution(* Account.withdraw(double)")
	public void validateWithdrawal(ProceedingJoinPoint proceedingJoinPoint) {
		double amount = (Double) proceedingJoinPoint.getArgs()[0];
		Account account = (Account)proceedingJoinPoint.getTarget();
		double newBalance = account.getBalance() - amount;
		
		if (amount < minimumWithdrawal || amount > account.getBalance() || newBalance < minimumBalance) {
			logDenial(account.getAccountNumber(), amount, new Date());
		}
	}

	private void logDenial(String accountNumber, double amount, Date date) throws IOException {
		File log = new File("accounts.log");
		FileWriter fw = new FileWriter(log, true);
		fw.write(String.format(logTemplate, args))
	}
}
